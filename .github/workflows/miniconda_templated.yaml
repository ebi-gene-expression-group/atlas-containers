name: Build and Push miniconda templated containers

on:
  push:
    paths:
      - "*/env.yaml"
      - "*/image_tag"
      - "*/post_install_dockerfile"
      - "miniconda_template/*"
      - ".github/workflows/miniconda_template.yaml"
  pull_request:
    paths:
      - "*/env.yaml"
      - "*/image_tag"
      - "*/post_install_dockerfile"
      - "miniconda_template/*"
      - ".github/workflows/miniconda_template.yaml"

jobs:
  getchanges:
    name: Get changed repos
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v11.5
        with:
          separator: ','
          #since_last_remote_commit: 'true'
          # sha: ${{ github.event.pull_request.head.sha }}
      - name: Changed base directories for u-mamba based containers
        id: changes
        run: |
          CHANGED_DIRS_JSON=$(echo ${{ steps.changed-files.outputs.all_changed_and_modified_files }} | \
            tr ',' '\n' | \
            awk '{ if ( $0 ~ /\// ) { print $1 } }' | \
            awk -F'/' '{ print $1 }' | sort -u | \
            awk 'system("test -f "$1"/env.yaml")==0 { print $1 }' | \
            jq -R -s -c 'split("\n") | map(select(length > 0))' )
          # | { changed: . }
          echo ::set-output name=changeddirsjson::"$CHANGED_DIRS_JSON"
          # echo ::set-output name=explicitjson::'"changed": ["atlas-index-base", "atlas-schemas-base"]'
      - name: Print changed directories with miniconda based containers
        run: |
          echo ${{steps.changes.outputs.changeddirsjson}}
          echo ${{fromJSON(steps.changes.outputs.changeddirsjson)}}
          echo ${{steps.changes.outputs.explicitjson}}
    outputs:
      changeddirs: ${{ steps.changes.outputs.changeddirsjson }}


  test:
    name: Build image
    runs-on: ubuntu-20.04
    needs: getchanges
    strategy:
      matrix:
        changed: ${{needs.getchanges.outputs.changeddirs}}
        # ${{fromJSON(needs.getchanges.outputs.explicit)}}

    # if: startsWith( github.ref, 'refs/heads/feature/' )
    steps:
    - uses: actions/checkout@v2

    - name: Check matrix
      run: |
        echo ${{ needs.getchanges.outputs.changeddirs }}
        echo ${{fromJSON(needs.getchanges.outputs.changeddirs)}}
        echo ${{fromJSON(needs.getchanges.outputs.explicit)}}
        echo ${{ matrix.changed }}

    - name: Read image
      id: gettag
      run: echo "::set-output name=image::$(head -n 1 ${{ matrix.changed }}/image_tag | awk -F':' '{ print $1 }' )"

    - name: Read tag
      id: gettagver
      run: echo "::set-output name=tag::$(head -n 1 ${{ matrix.changed }}/image_tag | awk -F':' '{ print $2 }' )"

    - name: Assemble Dockerfile
      run: miniconda_template/create_dockerfile.sh ${{ matrix.changed }}

    - name: Build image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ steps.gettag.outputs.image }}
        tags: latest ${{ steps.gettagver.outputs.tag }}
        context: ${{ matrix.changed }}
        dockerfiles: |
          ./${{ matrix.changed }}/Dockerfile

  deploy:
    needs: getchanges
    name: Build and deploy image to quay.io/ebigxa
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        changed: ${{fromJSON(needs.getchanges.outputs.changed_dirs_json)}}

    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2

    - name: Read image
      id: gettag
      run: echo "::set-output name=image::$(head -n 1 ${{ matrix.changed }}/image_tag | awk -F':' '{ print $1 }' )"

    - name: Read tag
      id: gettagver
      run: echo "::set-output name=tag::$(head -n 1 ${{ matrix.changed }}/image_tag | awk -F':' '{ print $2 }' )"

    - name: Assemble Dockerfile
      run: miniconda_template/create_dockerfile.sh ${{ matrix.changed }}

    - name: Build image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ steps.gettag.outputs.image }}
        tags: latest ${{ steps.gettagver.outputs.tag }}
        context: ${{ matrix.changed }}
        dockerfiles: |
          ./${{ matrix.changed }}/Dockerfile

    - name: Push to Quay
      id: push-to-quay
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.gettag.outputs.image }}
        tags: latest ${{ steps.gettagver.outputs.tag }}
        registry: quay.io/ebigxa
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Use the image
      run: echo "New image has been pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"
